import collections
import glob
from nltk import ngrams
from malwareEncoder import MalwareEncoder
from malware import Malware
from gram import Gram
from ngram import Ngram
import os.path
import sqlite3
import csv


def main():
    # fill in your preferred configuration.
    # the dirrectory where you store the files you wish to analyse
    dir = r"D:\git\malware-analytics\sample malware"
    fileExtension = r"bytes"  # The file extension.
    n = 6
    # The path where you wish to store the database file.
    pathToDatabase = "malware.db3"
    pathToCsv = "../../trainLabels.csv" # the file containing the classification labels.

    # search for all files in the directory dir with the extension fileExtension
    allfiles = (glob.glob(dir + r"\*." + fileExtension, recursive=False))

    labels = []
    with open(pathToCsv, 'r') as csvFile:
        reader = csv.reader(csvFile, delimiter=';')

        labels = [(x[0], x[1]) for x in reader]

    # a list of all labels of the malware file.
    # format: (malwareId, classId)
    labels.remove(labels[0])
        

    # worker(r"../../sample malware/0A32eTdBKayjCWhZqDOQ.bytes", 6, sqlite3.connect("malware.db3"))

    # create database connection
    con = createDatabase(pathToDatabase)

    # iterate throug all files.
    for file in allfiles:
        worker(file, n, con, labels)

    # close the connection
    con.close()
    print("finished!")


def createDatabase(databaseName):
    if os.path.exists(databaseName):
        print("Delete existing database file.")
        os.remove(databaseName)

    print("Create new database")
    c = sqlite3.connect(databaseName)

    print("Add table: class")
    c.execute('''CREATE TABLE class (
        id INTEGER,
        name TEXT,
        PRIMARY KEY(id AUTOINCREMENT))''')

    labels = [(1, "Ramnit"), (2, "Lollipop"), (3, "Kelihos_ver3"), (4, "Vundo"), (5, "Simda"), (6, "Tracur"), (7, "Kelihos_ver1"), (8, "Obfuscator.ACY"), (9, "Gatak"), (10, "Non malicious file")]
    
    c.executemany('''INSERT INTO class (id, name) VALUES (?,?)''', labels)
    print("Add table: file")
    c.execute('''CREATE TABLE file (
        id INTEGER,
        name TEXT,
        isMalware BOOL,
        classId INTEGER,
        PRIMARY KEY(id AUTOINCREMENT),
        FOREIGN KEY("classId") REFERENCES "class"("id"))''')

    print("Add table: ngram")
    c.execute('''CREATE TABLE ngram (
        id INTEGER,
        n INTEGER,
        fileId INTEGER,
        PRIMARY KEY(id AUTOINCREMENT),
        FOREIGN KEY("fileId") REFERENCES "file"("id"))''')

    print("Add table: gram")
    c.execute('''CREATE TABLE "gram" (
        "id"	INTEGER,
        "tokens" TEXT,
        "count"	INTEGER,
        "probability"	REAL,
        "probabilityWithoutMostCommon"	REAL,
        "ngramId"	INTEGER,
        PRIMARY KEY("id" AUTOINCREMENT),
        FOREIGN KEY("ngramId") REFERENCES "ngram"("id")
        )''')

    c.commit()

    # conn.execute('''CREATE TABLE "token" (
    #     "id"	INTEGER,
    #     "token"	TEXT,
    #     "gramId"	INTEGER,
    #     FOREIGN KEY("gramId") REFERENCES "gram"("id"),
    #     PRIMARY KEY("id" AUTOINCREMENT)
    #     )''')

    return c


def worker(fileName, n, conn, labels):
    cur = conn.cursor()
    malwareName = (fileName.split('\\')[-1]).split(".")[0]
    classLabel = next(label for label in labels if label[0] == malwareName)[1]

    print("Insert a new malware '{}'.".format(malwareName))
    cur.execute('''INSERT INTO file (name,classId,isMalware) VALUES (?,?,?)''', [malwareName, classLabel, True])
    conn.commit()
    malwareId = cur.lastrowid

    print("Filter the file: '{}' and generate a list of all tokens.".format(fileName))
    tokens = []
    with open(fileName) as lines:
        for line in lines:
            var = line.split()
            tokens.extend(filter(lambda x: len(x) != 8, var))

    for i in range(1, (n + 1)):
        print("Search for all {}-grams in the list of tokens".format(i))

        # add a new n gram into the database
        cur.execute(
            '''INSERT INTO ngram (n, fileId) VALUES (?,?)''', [i, malwareId])
        conn.commit()
        ngramId = cur.lastrowid

        # generate n grams 
        grams = ngrams(tokens, i)

        # This will create (('00', '00'), 29667)
        countedGrams = collections.Counter(grams).most_common()

        # delete all n-grams which will occure only one time.
        filteredGrams = list(filter(lambda x: x[1] > 1, countedGrams))

        # calculate sum of all grams in the whole file
        sumOfGrams = sum([y[1] for y in filteredGrams])

        # generate a list of tupels which ca be inserted into the database
        rows = list([(x[1], " ".join(x[0]), x[1] / sumOfGrams, ngramId)
                     for x in filteredGrams])
        
        # insert all grams into the database
        try:
            cur.executemany(
                '''INSERT INTO gram (count,tokens,probability,ngramId) VALUES (?,?,?,?);''', rows)
            conn.commit()
        except sqlite3.InterfaceError as ex:
            print("!!Attention!! - An error occured while inserting.")
            print("For the malware file: " + malwareName)
            print(ex)
            ff = open(malwareName + "json", "x")
            ff.write(MalwareEncoder().encode(rows))
            ff.close()
            print(MalwareEncoder().encode(ex))
        

        print("For the malware {}, {} {}-grams has been added to the database.".format(malwareName, cur.rowcount, i))


# def DetectAndWriteMalware(gramsI):
#     # Ngram: contains n for the length of the first tupel and gramps for the value. Ngram (n, List[Gram])
#     # Example: object = new Ngram (2, (('CC', 'CC'), 218684)
#     #         (('00', '00'), 29667)
#     #         (('??', '??'), 10793) )
#     #Gram: (('CC', 'CC'), 218684) + probability
#     # all n-grams
#     ngram = Ngram(None, None)
#     for x in allfiles:
#         fileName = x.split('.')[0] + '.json'
#         if not os.path.isfile(fileName):
#             file = open(fileName, "x")

#         for p in range(2, (gramsI+1)):  # geh von 1 bis 6(gramsI) durch
#             ngram.n = p
#             f = open(x, "r")
#             grams = ngrams(f.read().split(), p)
#             # das erzeugt  (('00', '00'), 29667)
#             gramsCounter = collections.Counter(grams)

#             filterList = list(filter(lambda x: len(
#                 x[0][0]) != 8 or x[1] != 1, gramsCounter.most_common()))
#             # for gramsi in gramsCounter:
#             #   if len(gramsi[0][0]) != 8 or gramsi[1] != 1:
#             #     filterListNew.append(gramsi)
#             grams2 = [Gram(x[0], x[1], None, None) for x in filterList]
#             ngram.grams = grams2
#             # calculate sum of all grams in the whole file
#             summe = sum([y[1] for y in filterList])

#             # calculate the Probabilty of each gram
#             listOfProbability = [x[1]/summe for x in filterList]
#             for i in range(len(ngram.grams)):
#                 ngram.grams[i].probability = listOfProbability[i]
#             print(ngram.grams[0])
#             malware = Malware('Malware_' + str(p), ngram, None)
#             file = open(fileName, "w")
#             malwarEncoder = MalwareEncoder()
#             file.write(malwarEncoder.encode(malware))
#             file.close()
#         # for grams in gramsCounter.most_common():
#         #   if len(grams[0][0]) < 8 or grams[1] != 1:
#         #     a.append(grams[-1])
#         #     print(grams)
#         #     summ = sum(a)
#         # for c in a:
#         #     perc = c/summ * 100
#         #     percent.append(perc)


# DetectAndWriteMalware(4)

if __name__ == "__main__":
    main()